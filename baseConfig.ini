
#TODO Updated list of models and datasets

[custom]
;directory for chains/output
chainsdir = chains_test
;chainsdir = chains_bambi

;set model
;model options: LCDM, LCDMasslessnu, nuLCDM, NeffLCDM, noradLCDM, nuoLCDM,
;nuwLCDM, oLCDM, wCDM, waCDM, owCDM, owaCDM, JordiCDM, WeirdCDM, TLight, StepCDM,
;Spline, PolyCDM, fPolyCDM, Decay, Decay01, Decay05, EarlyDE, EarlyDE_rd_DE, SlowRDE, sline
;more options located in the RunBase.py
model = owaCDM

;prefact options : [pre, phy]
prefact = phy

;varys8 True otherwise s8=0.8
varys8  = False

;set datasets used. Ex: UnionSN+BBAO+Planck
;data options: HD, BBAO, GBAO, GBAO_no6dF, CMASS, LBAO, LaBAO,
;LxBAO, MGS, Planck, WMAP, PlRd, WRd, PlDa, PlRdx10, CMBW, SN, SNx10, UnionSN,
;RiessH0, 6dFGS, dline
datasets = HD+SN+BBAO+Planck


;sampler can be {mcmc, nested, emcee}
;or analyzers {maxlike, genetic}
;
;mcmc -> metropolis-hastings
;nested
    ;engine can be {nestle, dynesty}
    ;nestedType can be
        ;none -> Prior mass without bounds
        ;single -> Ellipsoidal nested sampling
        ;multi -> multinest
        ;balls ->  balls centered on each live point
        ;cube -> cubes centered on each live point
;emcee
;maxlike -> Maximum Likelihood Analyzer
;genetic
analyzername = nested

;add derived parameters (True/False) ,
;i.e. Omega_Lambda, H0, Age of the Universe
addDerived = False

;use neural network to predict likelihoods (True/False),
;edit block neuralike to set options
useNeuralLike = True

[mcmc]
;Nsamples
nsamp   = 50

;Burn-in
skip    = 0

;temperature at which to sample
temp    = 2

; Gelman-Rubin for convergence
GRstop  = 0.01

;every number of steps check the GR-criteria
checkGR = 500

;1 if single cpu , otherwise is giving by the nproc-> mpi -np #
chainno = 0

;use mcevidence to compute Bayesinas evidene after posteriors are produed
evidence = False

[nested]
;engine can be nestle or dynesty
engine = dynesty

;type: for dynesty -> {'single','multi', 'balls', 'cubes'}
;type for nestle -> {'single', 'multi'}
nestedType = multi 

;it is recommended around nlivepoints=50*ndim, recommended 1024
nlivepoints = 100


;recommended 0.01
accuracy = 0.01

;u for flat(uniform) or g for gaussian prior
priortype = u

;when using gaussian prior
sigma = 2


;nproc = mp.cpu_count()//2 by default, you can set with another positive integer
nproc = 5

;Produce output on the fly
showfiles = True

;dynamic option is only for dynesty engine
;dynamic and neuralNetwork can be False/True
dynamic = False

neuralNetwork = False

;only to nested sampling if neuralNetwork = True, then you can set:

[neural]
;neural contains a modified version of pybambi
split = 0.8
learner = keras
;all the following options are only for keras learner
; number of neurons of the three hidden layers
numNeurons = 50
; epochs for training
epochs = 100
; number of training points
;ntrain = nlivepoints by default
;dlogz to start to train the neural net (we recommend dlogz_start <=10)
dlogz_start = 50
;number of nested (dynesty) iterations to start to train the neural net
it_to_start_net = 10000
;number of iterations to re-train the neural net. By default updInt = nlivepoints,
;choose updInt <= nlivepoints
;updInt = 500
;proxy_tolerance uncertainity of the net allowed.
proxy_tolerance = 0.3

[neuralike]
;neuralike contains options to use a neural network to predicts likelihood evaluations over the parameter space
ndivsgrid = 4
epochs = 500
learning_rate = 1e-5
batch_size = 16
psplit = 0.8
;hidden_layers_neurons: number of nodes per layer separated by commas
hidden_layers_neurons = 100, 100, 100
;number of procesors to make the grid
nproc = 5

[emcee]
walkers = 20
nsamp = 15000

burnin = x
nproc = 4


[maxlike]
;compute errror from Hessian matrix
;False/True
withErrors = True


#plot Fisher matrix
showplot = True

#If showplot is True, then
#2D plot for the parameters:
plot_par1 = Age
plot_par2 = Om

;[DerivedParameters]
showderived = True


;genetic parameters

[genetic]
n_individuals = 10
n_generations = 500
;selection_method = {tournament, roulette, rank}
selection_method = tournament
;mutation probability
mut_prob = 0.4
;distribution = {"uniform", "gaussian", "random"}
distribution = "uniform"
;media_distribution : media value for gaussian distributions
media_distribution = 1.0
;sd_distribution : Standard deviation for gaussian distributions
sd_distribution = 1.0
;min_distribution : Minimum value for uniform distributions
min_distribution = -1.0
;max_distribution : Maximum value for uniform distributions
max_distribution = 1.0
;stopping_early : It needs a value for "rounds_stopping" and "tolerance_stopping".
stopping_early = True
;rounds_stopping : Rounds to consider to stopping early with the tolerance_stopping value.
rounds_stopping = 100
;tolerance_stopping : Value to stopping early criteria.
;This value is the difference between the best fit for the
;latest rounds_stopping generations.
tolerance_stopping = 0.01
