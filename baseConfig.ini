
#TODO Updated list of models and datasets

[custom]
;directory for chains/output
;it is better if you set an absolute path
chainsdir = simplemc/chains/

;set model
;model options: LCDM, LCDMasslessnu, nuLCDM, NeffLCDM, noradLCDM, nuoLCDM,
;nuwLCDM, oLCDM, wCDM, waCDM, owCDM, owaCDM, JordiCDM, WeirdCDM, TLight, StepCDM,
;Spline, PolyCDM, fPolyCDM, Decay, Decay01, Decay05, EarlyDE, EarlyDE_rd_DE, SlowRDE, sline
;more options located in the RunBase.py
model = owaCDM

;prefact options : [pre, phy]
prefact = phy

;varys8 True otherwise s8=0.8
varys8  = False
;set datasets used. Ex: UnionSN+BBAO+Planck
;data options: HD, BBAO, GBAO, GBAO_no6dF, CMASS, LBAO, LaBAO,
;LxBAO, MGS, Planck, WMAP, PlRd, WRd, PlDa, PlRdx10, CMBW, SN, SNx10, UnionSN,
;RiessH0, 6dFGS, dline, generic
datasets = HD+SN+CBAO

;following four lines is to use external datasets
;fn can be distance_mod, h, fs8
;datasets = generic
;path_to_data = /home/cosmocicatais/panth15.txt
;path_to_cov = /home/cosmocicatais/panth15cov.txt
;fn = distance_mod


;sampler can be {mcmc, nested, emcee}
;or analyzers {maxlike, genetic, ga_deap}
;
;mcmc -> metropolis-hastings
;nested -> nested sampling
;emcee
;maxlike -> Maximum Likelihood Analyzer
;genetic -> ga_deap (genetic using deap library)
analyzername = nested


;add derived parameters (True/False) ,
;i.e. Omega_Lambda, H0, Age of the Universe
addDerived = False

;mcevidence = True to calculate Bayesian evidence wiht mcevidence
;Only valid to samplers (mcmc, emcee, nested).
;Nested sampling does not need it.
mcevidence = False
;mcevidence_k is the k number of nearest neighbours in mcevidence
mcevidence_k = 2

;overwrite = True -> overwrite output files with the same name
;overwrite = False -> if the outputname already exist
;it sends an error and ends the simplemc execution
overwrite = True

;options to triangle plots for mcmc, nested and emcee;
;if True any of the following options
;.png files will be saved in chainsdir
getdist = False
corner = False
simpleplot = False
;True to display figures; we recommended false
showfig = False

;use neural network to predict likelihoods (True/False),
;edit block neuralike to set options
useNeuralike = True


[mcmc]
;Nsamples
nsamp   = 500

;Burn-in
skip    = 0

;temperature at which to sample
temp    = 2

; Gelman-Rubin for convergence
GRstop  = 0.01

;every number of steps check the GR-criteria
checkGR = 50

;1 if single cpu , otherwise is giving by the nproc-> mpi -np #
chainno = 0


[nested]
;type for dynesty -> {'single','multi', 'balls', 'cubes'}
nestedType = multi 

;it is recommended around nlivepoints=50*ndim, recommended 1024
nlivepoints = 200

;recommended 0.01
accuracy = 0.01

;u for flat(uniform) or g for gaussian prior
priortype = u

;when using gaussian prior
sigma = 2


;if nproc = 0 uses mp.cpu_count()//2 by default, 
;you can set with another positive integer
nproc = 6

;Produce output on the fly
showfiles = True

;dynamic option is only for dynesty engine
;dynamic and neuralNetwork can be False/True
dynamic = False


[neuralike]
;neuralike contains options to use a neural network in likelihood evaluations over the parameter space
epochs = 100
learning_rate = 1e-3
batch_size = 8
psplit = 0.7
;hidden_layers_neurons: number of nodes per layer separated by commas
hidden_layers_neurons = 200, 200, 200
plot = True
patience = 50
# neuralike
nrand = 1000
valid_loss = 0.01
nstart_samples = 5000
nstart_stop_criterion = 5
updInt = 200
ncalls_excess = 100000


[emcee]
;walkers >= 2*dim
walkers = 10
nsamp = 200
burnin = 0
nproc = 4


[maxlike]
;compute errror from Hessian matrix
;False/True
compute_errors = False

;If withErrors is True
;plot Fisher matrix
show_contours = False

;If showplot is True, then
;2D plot for the parameters:
plot_par1 = h
plot_par2 = Om

;[DerivedParameters]
compute_derived = True


;genetic parameters

[ga_deap]
;Population size
population = 21
;Crossover probability
crossover = 0.7
;Mutation probability
mutation = 0.8
;Max generation number
max_generation = 10
;Size of the Hall of Fame
hof_size = 1
;Crowding factor
crowding_factor = 1

;Plot Generation vs Fitness
plot_fitness = True

;compute errror from Hessian matrix
;False/True
compute_errors = True

;If compute_errors is True
;plot Fisher matrix
show_contours = True

;If show_contours is True, then
;2D plot for the parameters:
plot_param1 = h
plot_param2 = Om
